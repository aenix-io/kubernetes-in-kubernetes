{{- $fullName := include "kubernetes.fullname" . -}}

{{- if .Values.konnectivityAgent.daemonSet -}}
apiVersion: apps/v1
kind: DaemonSet
{{- else -}}
apiVersion: apps/v1
kind: Deployment
{{- end }}
metadata:
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
    k8s-app: konnectivity-agent
    {{- with .Values.konnectivityAgent.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
    {{- with .Values.konnectivityAgent.annotations }}
    annotations:
      {{- toYaml . | nindent 4 }}
    {{- end }}
  namespace: kube-system
  name: konnectivity-agent
spec:
  {{- if not .Values.konnectivityAgent.daemonSet }}
  replicas: {{ .Values.konnectivityAgent.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      k8s-app: konnectivity-agent
  template:
    metadata:
      labels:
        k8s-app: konnectivity-agent
        {{- with .Values.konnectivityAgent.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.konnectivityAgent.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.konnectivityAgent.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      hostNetwork: {{ .Values.konnectivityAgent.hostNetwork }}
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      priorityClassName: system-cluster-critical
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      {{- with .Values.konnectivityAgent.tolerations }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- if or .Values.konnectivityServer.affinity .Values.konnectivityServer.podAntiAffinity }}
      affinity:
        {{- with .Values.konnectivityServer.affinity }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if eq .Values.konnectivityServer.podAntiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "{{ .Values.konnectivityServer.podAntiAffinityTopologyKey }}"
              labelSelector:
                matchLabels:
                  app: {{ $fullName }}-konnectivity-server
        {{- else if eq .Values.konnectivityServer.podAntiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: "{{ .Values.konnectivityServer.podAntiAffinityTopologyKey }}"
                labelSelector:
                  matchLabels:
                    app: {{ $fullName }}-konnectivity-server
        {{- end }}
      {{- end }}
      {{- with .Values.konnectivityServer.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 10 }}
      {{- end }}
      containers:
      - name: konnectivity-agent
        {{- with .Values.konnectivityAgent.image }}
        image: "{{ .repository }}{{ if .digest }}@{{ .digest }}{{ else }}:{{ .tag }}{{ end }}"
        imagePullPolicy: {{ .pullPolicy }}
        {{- end }}
        command:
        - /proxy-agent
        - --logtostderr=true
        - --ca-cert=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - --service-account-token-path=/var/run/secrets/tokens/konnectivity-agent-token

        {{- if not (hasKey .Values.konnectivityAgent.extraArgs "proxy-server-host") }}
        {{- if and (eq .Values.konnectivityServer.mode "HTTPConnect") .Values.konnectivityServer.service.loadBalancerIP }}
        - --proxy-server-host={{ .Values.konnectivityServer.service.loadBalancerIP }}
        {{- else if and (eq .Values.konnectivityServer.mode "GRPC") .Values.apiServer.service.loadBalancerIP }}
        - --proxy-server-host={{ .Values.apiServer.service.loadBalancerIP }}
        {{- else }}
        {{- fail ".konnectivityAgent.extraArgs.proxy-server-host must be specified!" }}
        {{- end }}
        {{- end }}

        {{- if not (hasKey .Values.konnectivityAgent.extraArgs "proxy-server-port") }}
        {{- if eq .Values.konnectivityServer.service.type "LoadBalancer" }}
        - --proxy-server-port={{ .Values.konnectivityServer.service.ports.agent }}
        {{- else if .Values.konnectivityServer.service.NodePort }}
        - --proxy-server-port={{ .Values.konnectivityServer.service.nodePorts.agent }}
        {{- else }}
        {{- fail ".konnectivityAgent.extraArgs.proxy-server-port must be specified!" }}
        {{- end }}
        {{- end }}

        - --admin-server-port={{ .Values.konnectivityAgent.ports.admin }}
        - --health-server-port={{ .Values.konnectivityAgent.ports.health }}

        {{- range $key, $value := .Values.konnectivityAgent.extraArgs }}
        - --{{ $key }}={{ $value }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.konnectivityAgent.ports.admin }}
          name: admin
        - containerPort: {{ .Values.konnectivityAgent.ports.health }}
          name: health
        volumeMounts:
        - mountPath: /var/run/secrets/tokens
          name: konnectivity-agent-token
        {{- with .Values.konnectivityAgent.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.konnectivityAgent.ports.health }}
            scheme: HTTP
          initialDelaySeconds: 15
          timeoutSeconds: 15
      {{- with .Values.konnectivityAgent.sidecars }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      serviceAccountName: konnectivity-agent
      volumes:
      - name: konnectivity-agent-token
        projected:
          sources:
          - serviceAccountToken:
              path: konnectivity-agent-token
              audience: system:konnectivity-server
      {{- with .Values.konnectivityAgent.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
